logging:
  level:
    org.springframework.security: DEBUG
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

server:
  port: ${SERVER_PORT}
  error:
    include-message: always
    include-binding-errors: always

spring:
  application:
    name: auth-service
  profiles:
    active: ${ACTIVE_PROFILE:dev}
  datasource:
    url: jdbc:postgresql://${POSTGRES_SQL_HOST}:${POSTGRES_SQL_PORT}/${POSTGRES_SQL_DB}
    driver-class-name: org.postgresql.Driver
    username: ${POSTGRES_SQL_USERNAME}
    password: ${POSTGRES_SQL_PASSWORD}
  jpa:
    properties:
      org.hibernate.envers.cleanup_strategy: none
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    defer-datasource-initialization: true
  sql:
    init:
      mode: never
  mail:
    host: smtp.gmail.com
    port: 587
    username: paygoudoufreddy@gmail.com
    password: mucqvaswlsqjhjlk
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html
    encoding: utf-8


resilience4j:
  circuitbreaker:
    instances:
      authService:
        registerHealthIndicator: true
        event-consumer-buffer-size: 10
        failureRateThreshold: 50
        minimum-number-of-calls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
  retry:
    instances:
      authService:
        max-attempts: 5
        wait-duration: 5s


rsa:
  public-key: classpath:certs/public.pem
  private-key: classpath:certs/private.pem
pagination:
  default-page: "0"
  default-size: "20"


# Kafka config

auth-service:
  user-creation-email-request-topic-name: email-creation-email-request
  user-creation-email-response-topic-name: email-creation-email-response
  ask-new-validation-code-email-request-topic-name: ask-new-validation-code-email-request
  ask-new-validation-code-email-response-topic-name: ask-new-validation-code-email-response
  request-email-reset-email-request-topic-name: request-email-reset-email-request
  request-email-reset-email-response-topic-name: request-email-reset-email-response
  request-password-reset-no-auth-email-request-topic-name: request-password-reset-no-email-email-request
  request-password-reset-no-auth-email-response-topic-name: request-password-reset-no-email-email-response
  outbox-scheduler-fixed-rate: 5000 #less in production
  outbox-scheduler-initial-delay: 5000 #less in production


#kafka-config:
#  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
#  schema-registry-url-key: schema.registry.url
#  schema-registry-url: http://localhost:8081
#  num-of-partitions: 3
#  replication-factor: 3
#
#kafka-producer-config:
#  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
#  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
#  compression-type: snappy
#  acks: all
#  batch-size: 16384
#  batch-size-boost-factor: 100
#  linger-ms: 5
#  request-timeout-ms: 60000
#  retry-count: 5
#
#kafka-consumer-config:
#  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
#  email-consumer-group-id: email-topic-consumer
#  auto-offset-reset: earliest
#  specific-avro-reader-key: specific.avro.reader
#  specific-avro-reader: true
#  batch-listener: true
#  auto-startup: true
#  concurrency-level: 3
#  session-timeout-ms: 10000
#  heartbeat-interval-ms: 3000
#  max-poll-interval-ms: 300000
#  max-poll-records: 500
#  max-partition-fetch-bytes-default: 1048576
#  max-partition-fetch-bytes-boost-factor: 1
#  poll-timeout-ms: 150